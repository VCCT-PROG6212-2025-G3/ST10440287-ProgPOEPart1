@model List<ProgPOE.Models.Claim>
@{
    ViewData["Title"] = "Approve Claims";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .approval-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 30px;
        border-radius: 15px;
        margin-bottom: 30px;
        color: white;
    }

    .claim-review-card {
        border-left: 5px solid #ffc107;
        margin-bottom: 20px;
        transition: all 0.3s ease;
    }

        .claim-review-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }

        .claim-review-card.selected {
            border-left-color: #007bff;
            background-color: #f8f9fa;
        }

    .stat-card {
        border-radius: 12px;
        padding: 20px;
        color: white;
        margin-bottom: 20px;
    }

    .review-panel {
        position: sticky;
        top: 20px;
        border-radius: 12px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.1);
    }

    .action-btn {
        padding: 12px 30px;
        font-size: 1.1rem;
        border-radius: 8px;
        font-weight: bold;
        transition: all 0.3s ease;
    }

        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        }

    .claim-detail-row {
        padding: 8px 0;
        border-bottom: 1px solid #eee;
    }

        .claim-detail-row:last-child {
            border-bottom: none;
        }

    .badge-large {
        font-size: 1rem;
        padding: 8px 15px;
    }

    .urgency-high {
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0%, 100%{
        opacity: 1;
    }
    50% {
        opacity: 0.7;
    }
    }

    .document-list {
        max-height: 200px;
        overflow-y: auto;
    }

    .guideline-box {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 15px;
    }
</style>

<div class="approval-container">
    <div class="text-center">
        <h1 class="display-4">✅ Review & Approve Claims</h1>
        <p class="lead">@ViewBag.UserRole Dashboard</p>
        <p>Welcome, @ViewBag.UserName</p>
    </div>
</div>

<!-- Summary Statistics -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="stat-card bg-warning text-center">
            <h2>@Model.Count</h2>
            <p class="mb-0">⏳ Pending Review</p>
        </div>
    </div>
    <div class="col-md-3">
        <div class="stat-card bg-danger text-center">
            <h2>@Model.Count(c => (DateTime.Now - c.SubmissionDate).Days > 7)</h2>
            <p class="mb-0">🚨 Urgent (>7 days)</p>
        </div>
    </div>
    <div class="col-md-3">
        <div class="stat-card bg-info text-center">
            <h2>@Model.Count(c => c.TotalAmount > 50000)</h2>
            <p class="mb-0">💰 High Value (>R50k)</p>
        </div>
    </div>
    <div class="col-md-3">
        <div class="stat-card bg-success text-center">
            <h2>R @Model.Sum(c => c.TotalAmount).ToString("N2")</h2>
            <p class="mb-0">💵 Total Amount</p>
        </div>
    </div>
</div>

<!-- Filter Bar -->
<div class="card mb-4">
    <div class="card-header bg-primary text-white">
        <h5 class="mb-0">🔍 Filter & Sort Claims</h5>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-3">
                <label class="form-label fw-bold">Filter by Priority:</label>
                <select class="form-control" id="priorityFilter" onchange="filterClaims()">
                    <option value="all">All Claims</option>
                    <option value="urgent">Urgent (>7 days)</option>
                    <option value="high-value">High Value (>R50k)</option>
                    <option value="recent">Recent (Last 3 days)</option>
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label fw-bold">Sort by:</label>
                <select class="form-control" id="sortOrder" onchange="sortClaims()">
                    <option value="date-asc">Date (Oldest First)</option>
                    <option value="date-desc">Date (Newest First)</option>
                    <option value="amount-desc">Amount (High to Low)</option>
                    <option value="amount-asc">Amount (Low to High)</option>
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label fw-bold">Search Lecturer:</label>
                <input type="text" class="form-control" id="searchInput" placeholder="Search by name..." onkeyup="searchClaims()">
            </div>
            <div class="col-md-3">
                <label class="form-label fw-bold">Bulk Actions:</label>
                <div class="btn-group w-100">
                    <button class="btn btn-outline-primary" onclick="selectAll()">
                        ☑️ Select All
                    </button>
                    <button class="btn btn-outline-secondary" onclick="clearSelection()">
                        ❌ Clear
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <!-- Claims List Column -->
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header bg-info text-white">
                <h5 class="mb-0">📋 Claims Awaiting Your Approval</h5>
            </div>
            <div class="card-body">
                @if (Model.Count == 0)
                {
                    <div class="text-center py-5">
                        <h3>✅ All Clear!</h3>
                        <p class="text-muted">No pending claims at the moment.</p>
                    </div>
                }
                else
                {
                    <div id="claimsList">
                        @foreach (var claim in Model.OrderBy(c => c.SubmissionDate))
                        {
                            var daysWaiting = (DateTime.Now - claim.SubmissionDate).Days;
                            var isUrgent = daysWaiting > 7;
                            var isHighValue = claim.TotalAmount > 50000;

                            <div class="card claim-review-card"
                                 data-claim-id="@claim.ClaimId"
                                 data-amount="@claim.TotalAmount"
                                 data-date="@claim.SubmissionDate.Ticks"
                                 data-lecturer="@claim.Lecturer?.FullName"
                                 data-days="@daysWaiting">
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-1">
                                            <input type="checkbox" class="form-check-input claim-checkbox"
                                                   data-claim-id="@claim.ClaimId" style="width: 25px; height: 25px;">
                                        </div>
                                        <div class="col-md-11">
                                            <div class="d-flex justify-content-between align-items-start mb-3">
                                                <div>
                                                    <h5 class="mb-1">
                                                        <strong>@claim.Lecturer?.FullName</strong>
                                                        @if (isUrgent)
                                                        {
                                                            <span class="badge bg-danger urgency-high ms-2">🚨 Urgent</span>
                                                        }
                                                        @if (isHighValue)
                                                        {
                                                            <span class="badge bg-warning text-dark ms-2">💰 High Value</span>
                                                        }
                                                    </h5>
                                                    <p class="text-muted mb-0">
                                                        <small>
                                                            @claim.Lecturer?.Department |
                                                            @claim.Lecturer?.Email
                                                        </small>
                                                    </p>
                                                </div>
                                                <span class="badge badge-large bg-primary">
                                                    CL-@claim.ClaimId.ToString("D6")
                                                </span>
                                            </div>

                                            <div class="row mb-2">
                                                <div class="col-md-6">
                                                    <div class="claim-detail-row">
                                                        <strong>📅 Period:</strong> @claim.MonthYear
                                                    </div>
                                                    <div class="claim-detail-row">
                                                        <strong>⏰ Hours Worked:</strong> @claim.HoursWorked hours
                                                    </div>
                                                    <div class="claim-detail-row">
                                                        <strong>💵 Hourly Rate:</strong> R @claim.HourlyRate.ToString("N2")
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="claim-detail-row">
                                                        <strong>📤 Submitted:</strong> @claim.SubmissionDate.ToString("dd MMM yyyy")
                                                    </div>
                                                    <div class="claim-detail-row">
                                                        <strong>⏱️ Waiting:</strong> @daysWaiting day(s)
                                                    </div>
                                                    <div class="claim-detail-row">
                                                        <strong>📎 Documents:</strong>
                                                        @if (claim.Documents.Any())
                                                        {
                                                            <span class="badge bg-info">@claim.Documents.Count file(s)</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-warning">No documents</span>
                                                        }
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="alert alert-success mb-2">
                                                <strong>💰 Total Claim Amount: R @claim.TotalAmount.ToString("N2")</strong>
                                            </div>

                                            @if (!string.IsNullOrEmpty(claim.LecturerNotes))
                                            {
                                                <div class="alert alert-info mb-2">
                                                    <strong>📝 Lecturer Notes:</strong><br>
                                                    @claim.LecturerNotes
                                                </div>
                                            }

                                            <div class="mt-3">
                                                <button class="btn btn-primary btn-sm me-2"
                                                        onclick="reviewClaim(@claim.ClaimId, '@claim.Lecturer?.FullName', '@claim.MonthYear', @claim.HoursWorked, @claim.HourlyRate, @claim.TotalAmount, '@claim.LecturerNotes', @claim.Documents.Count, '@claim.SubmissionDate.ToString("dd MMM yyyy")', @daysWaiting)">
                                                    🔍 Review Claim
                                                </button>
                                                <button class="btn btn-success btn-sm me-2"
                                                        onclick="quickApprove(@claim.ClaimId, '@claim.Lecturer?.FullName')">
                                                    ✅ Quick Approve
                                                </button>
                                                <button class="btn btn-danger btn-sm"
                                                        onclick="quickReject(@claim.ClaimId, '@claim.Lecturer?.FullName')">
                                                    ❌ Quick Reject
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

        <!-- Bulk Actions -->
        @if (Model.Count > 0)
        {
            <div class="card mt-3">
                <div class="card-body">
                    <h5>⚡ Bulk Actions</h5>
                    <p class="text-muted">Select multiple claims using checkboxes above</p>
                    <button class="btn btn-success me-2" onclick="bulkApprove()">
                        ✅ Approve Selected
                    </button>
                    <button class="btn btn-danger" onclick="bulkReject()">
                        ❌ Reject Selected
                    </button>
                    <span class="ms-3" id="selectedCount">0 claims selected</span>
                </div>
            </div>
        }
    </div>

    <!-- Review Panel Column -->
    <div class="col-lg-4">
        <div class="card review-panel" id="reviewPanel" style="display: none;">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">📝 Claim Review</h5>
            </div>
            <div class="card-body">
                <div id="claimDetails"></div>

                <hr>

                <h6 class="fw-bold">💬 Review Comments:</h6>
                <textarea id="reviewComments" class="form-control mb-3" rows="4"
                          placeholder="Enter your comments here (required for rejection)..."></textarea>

                <div class="d-grid gap-2">
                    <button class="btn btn-success action-btn" onclick="approveClaim()">
                        ✅ Approve Claim
                    </button>
                    <button class="btn btn-danger action-btn" onclick="rejectClaim()">
                        ❌ Reject Claim
                    </button>
                    <button class="btn btn-warning action-btn" onclick="returnClaim()">
                        ↩️ Return for Revision
                    </button>
                    <button class="btn btn-secondary" onclick="closeReview()">
                        ❌ Close
                    </button>
                </div>
            </div>
        </div>

        <!-- Approval Guidelines -->
        <div class="card mt-3">
            <div class="card-header bg-success text-white">
                <h6 class="mb-0">📋 Approval Guidelines</h6>
            </div>
            <div class="card-body">
                <div class="guideline-box">
                    <h6 class="text-success">✅ Approve if:</h6>
                    <ul class="small mb-0">
                        <li>Hours are reasonable and documented</li>
                        <li>Supporting documents are complete</li>
                        <li>Hourly rate matches contract</li>
                        <li>No discrepancies in information</li>
                        <li>All required fields are filled</li>
                    </ul>
                </div>

                <div class="guideline-box">
                    <h6 class="text-danger">❌ Reject if:</h6>
                    <ul class="small mb-0">
                        <li>Missing required documentation</li>
                        <li>Hours exceed reasonable limits</li>
                        <li>Inconsistent information</li>
                        <li>Duplicate submissions</li>
                        <li>Incorrect rate applied</li>
                    </ul>
                </div>

                <div class="guideline-box">
                    <h6 class="text-warning">↩️ Return if:</h6>
                    <ul class="small mb-0">
                        <li>Minor corrections needed</li>
                        <li>Additional documents required</li>
                        <li>Clarification needed</li>
                        <li>Small errors that can be fixed</li>
                    </ul>
                </div>

                <div class="alert alert-info mb-0 mt-3">
                    <small>
                        <strong>💡 Tip:</strong> Review urgent claims first (marked with 🚨)
                        and high-value claims (>R50,000) carefully.
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentClaimId = null;

        // Review a specific claim
        function reviewClaim(claimId, lecturerName, period, hours, rate, total, notes, docCount, submittedDate, daysWaiting) {
            currentClaimId = claimId;

            // Highlight selected claim
            document.querySelectorAll('.claim-review-card').forEach(card => {
                card.classList.remove('selected');
            });
            document.querySelector(`[data-claim-id="${claimId}"]`).classList.add('selected');

            // Populate details
            const detailsHtml = `
                <h6 class="fw-bold">${lecturerName}</h6>
                <hr>
                <p class="mb-2"><strong>Claim ID:</strong> CL-${claimId.toString().padStart(6, '0')}</p>
                <p class="mb-2"><strong>Period:</strong> ${period}</p>
                <p class="mb-2"><strong>Hours Worked:</strong> ${hours}</p>
                <p class="mb-2"><strong>Hourly Rate:</strong> R ${parseFloat(rate).toFixed(2)}</p>
                <p class="mb-2"><strong>Submitted:</strong> ${submittedDate}</p>
                <p class="mb-2"><strong>Waiting:</strong> ${daysWaiting} day(s)</p>
                <p class="mb-2"><strong>Documents:</strong> ${docCount} file(s)</p>
                <hr>
                <div class="alert alert-success">
                    <strong>Total Amount:</strong><br>
                    <h4 class="mb-0">R ${parseFloat(total).toFixed(2)}</h4>
                </div>
                ${notes ? `<div class="alert alert-info"><strong>Notes:</strong><br>${notes}</div>` : ''}
            `;

            document.getElementById('claimDetails').innerHTML = detailsHtml;
            document.getElementById('reviewPanel').style.display = 'block';
            document.getElementById('reviewComments').value = '';

            // Scroll to review panel on mobile
            if (window.innerWidth < 992) {
                document.getElementById('reviewPanel').scrollIntoView({ behavior: 'smooth' });
            }
        }

        // Approve claim
        function approveClaim() {
            if (!currentClaimId) return;

            const comments = document.getElementById('reviewComments').value;

            if (confirm(`✅ Approve this claim?\n\nClaim ID: CL-${currentClaimId.toString().padStart(6, '0')}\n\nThis will forward the claim for final processing.`)) {
                submitApproval(currentClaimId, 'Approve', comments);
            }
        }

        // Reject claim
        function rejectClaim() {
            if (!currentClaimId) return;

            const comments = document.getElementById('reviewComments').value.trim();

            if (!comments) {
                alert('⚠️ Please provide comments explaining why you are rejecting this claim.');
                document.getElementById('reviewComments').focus();
                return;
            }

            if (confirm(`❌ Reject this claim?\n\nClaim ID: CL-${currentClaimId.toString().padStart(6, '0')}\n\nThe lecturer will be notified with your feedback.`)) {
                submitApproval(currentClaimId, 'Reject', comments);
            }
        }

        // Return claim for revision
        function returnClaim() {
            if (!currentClaimId) return;

            const comments = document.getElementById('reviewComments').value.trim();

            if (!comments) {
                alert('⚠️ Please provide comments explaining what needs to be corrected.');
                document.getElementById('reviewComments').focus();
                return;
            }

            if (confirm(`↩️ Return this claim for revision?\n\nClaim ID: CL-${currentClaimId.toString().padStart(6, '0')}\n\nThe lecturer can make corrections and resubmit.`)) {
                submitApproval(currentClaimId, 'Return', comments);
            }
        }

        // Submit approval decision
        function submitApproval(claimId, action, comments) {
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '@Url.Action("ProcessApproval", "Home")';

            const fields = {
                '__RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value,
                'claimId': claimId,
                'action': action,
                'comments': comments
            };

            for (const key in fields) {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = key;
                input.value = fields[key];
                form.appendChild(input);
            }

            document.body.appendChild(form);
            form.submit();
        }

        // Quick approve
        function quickApprove(claimId, lecturerName) {
            if (confirm(`✅ Quick Approve\n\nApprove claim for ${lecturerName}?\n\nClaim ID: CL-${claimId.toString().padStart(6, '0')}`)) {
                submitApproval(claimId, 'Approve', 'Quick approval - all requirements met');
            }
        }

        // Quick reject
        function quickReject(claimId, lecturerName) {
            const reason = prompt(`❌ Quick Reject\n\nRejecting claim for ${lecturerName}\n\nPlease provide a reason:`);

            if (reason && reason.trim()) {
                submitApproval(claimId, 'Reject', reason);
            } else if (reason !== null) {
                alert('⚠️ A reason is required to reject a claim.');
            }
        }

        // Close review panel
        function closeReview() {
            document.getElementById('reviewPanel').style.display = 'none';
            document.querySelectorAll('.claim-review-card').forEach(card => {
                card.classList.remove('selected');
            });
            currentClaimId = null;
        }

        // Checkbox management
        document.addEventListener('change', function(e) {
            if (e.target.classList.contains('claim-checkbox')) {
                updateSelectedCount();
            }
        });

        function updateSelectedCount() {
            const count = document.querySelectorAll('.claim-checkbox:checked').length;
            document.getElementById('selectedCount').textContent = `${count} claim(s) selected`;
        }

        function selectAll() {
            document.querySelectorAll('.claim-checkbox').forEach(cb => cb.checked = true);
            updateSelectedCount();
        }

        function clearSelection() {
            document.querySelectorAll('.claim-checkbox').forEach(cb => cb.checked = false);
            updateSelectedCount();
        }

        // Bulk actions
        function bulkApprove() {
            const selected = Array.from(document.querySelectorAll('.claim-checkbox:checked'));

            if (selected.length === 0) {
                alert('⚠️ Please select at least one claim to approve.');
                return;
            }

            if (confirm(`✅ Bulk Approve\n\nApprove ${selected.length} claim(s)?\n\nAll selected claims will be forwarded for processing.`)) {
                const comments = 'Bulk approval - all requirements met';
                selected.forEach(cb => {
                    const claimId = cb.getAttribute('data-claim-id');
                    submitApproval(claimId, 'Approve', comments);
                });
            }
        }

        function bulkReject() {
            const selected = Array.from(document.querySelectorAll('.claim-checkbox:checked'));

            if (selected.length === 0) {
                alert('⚠️ Please select at least one claim to reject.');
                return;
            }

            const reason = prompt(`❌ Bulk Reject\n\nRejecting ${selected.length} claim(s)\n\nPlease provide a reason:`);

            if (reason && reason.trim()) {
                selected.forEach(cb => {
                    const claimId = cb.getAttribute('data-claim-id');
                    submitApproval(claimId, 'Reject', reason);
                });
            }
        }

        // Filter claims
        function filterClaims() {
            const filter = document.getElementById('priorityFilter').value;
            const claims = document.querySelectorAll('.claim-review-card');

            claims.forEach(claim => {
                const days = parseInt(claim.getAttribute('data-days'));
                const amount = parseFloat(claim.getAttribute('data-amount'));
                let show = true;

                switch(filter) {
                    case 'urgent':
                        show = days > 7;
                        break;
                    case 'high-value':
                        show = amount > 50000;
                        break;
                    case 'recent':
                        show = days <= 3;
                        break;
                }

                claim.style.display = show ? 'block' : 'none';
            });
        }

        // Sort claims
        function sortClaims() {
            const sortOrder = document.getElementById('sortOrder').value;
            const container = document.getElementById('claimsList');
            const claims = Array.from(container.querySelectorAll('.claim-review-card'));

            claims.sort((a, b) => {
                switch(sortOrder) {
                    case 'date-asc':
                        return parseInt(a.getAttribute('data-date')) - parseInt(b.getAttribute('data-date'));
                    case 'date-desc':
                        return parseInt(b.getAttribute('data-date')) - parseInt(a.getAttribute('data-date'));
                    case 'amount-desc':
                        return parseFloat(b.getAttribute('data-amount')) - parseFloat(a.getAttribute('data-amount'));
                    case 'amount-asc':
                        return parseFloat(a.getAttribute('data-amount')) - parseFloat(b.getAttribute('data-amount'));
                    default:
                        return 0;
                }
            });

            claims.forEach(claim => container.appendChild(claim));
        }

        // Search claims
        function searchClaims() {
            const search = document.getElementById('searchInput').value.toLowerCase();
            const claims = document.querySelectorAll('.claim-review-card');

            claims.forEach(claim => {
                const lecturer = claim.getAttribute('data-lecturer').toLowerCase();
                claim.style.display = lecturer.includes(search) ? 'block' : 'none';
            });
        }
    </script>

    @Html.AntiForgeryToken()
}